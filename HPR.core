module 'HPR' ['add'/2, 'module_info'/0, 'three'/0] attributes []
'False'/0 =
    fun() ->
        case {} of
            {} when 'true' ->
                'False'
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__False'/0 =
    fun() ->
        apply call 'erlang':'make_fun' ('Prim', 'curry', 1)('False'/0)
'True'/0 =
    fun() ->
        case {} of
            {} when 'true' ->
                'True'
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__True'/0 =
    fun() ->
        apply call 'erlang':'make_fun' ('Prim', 'curry', 1)('True'/0)
'add'/2 =
    fun(X@1, X@2) ->
        case {X@1, X@2} of
            {Px, Py} when 'true' ->
                apply apply apply apply apply apply call 'erlang':'make_fun'
                                                    ('Prim', '__apply',
                                                     0)()("erlang")("+")(2)(Px)(Py)
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__add'/0 =
    fun() ->
        apply call 'erlang':'make_fun' ('Prim', 'curry', 1)('add'/2)
'loop'/1 =
    fun(X@1) ->
        case {X@1} of
            {Px} when 'true' ->
                apply apply '__loop'/0()(Px)
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__loop'/0 =
    fun() ->
        apply call 'erlang':'make_fun' ('Prim', 'curry', 1)('loop'/1)
'three'/0 =
    fun() ->
        case {} of
            {} when 'true' ->
                apply apply apply '__add'/0()(1)(2)
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__three'/0 =
    fun() ->
        apply call 'erlang':'make_fun' ('Prim', 'curry', 1)('three'/0)
'module_info'/0 =
    fun() -> call 'erlang':'get_module_info' ('HPR')
'module_info'/1 =
    fun(_cor0) -> call 'erlang':'get_module_info' ('HPR', _cor0)
end