module Parser.SkelHopper where

-- Haskell module generated by the BNF converter

import Parser.AbsHopper
import Utils.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdVar :: IdVar -> Result
transIdVar x = case x of
  IdVar str  -> failure x


transIdCon :: IdCon -> Result
transIdCon x = case x of
  IdCon str  -> failure x


transIdOpr :: IdOpr -> Result
transIdOpr x = case x of
  IdOpr str  -> failure x


transModule :: Module -> Result
transModule x = case x of
  MMod idcon exports defs  -> failure x


transExports :: Exports -> Result
transExports x = case x of
  NEmpty  -> failure x
  NExps exports  -> failure x


transExport :: Export -> Result
transExport x = case x of
  NExp idvar  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DFun func  -> failure x
  DSig sign  -> failure x
  DAdt adt  -> failure x


transFunc :: Func -> Result
transFunc x = case x of
  FFun idvar args expr  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  AId id  -> failure x
  APrim prim  -> failure x
  AWild  -> failure x
  ATuple argtuples  -> failure x


transArgTuple :: ArgTuple -> Result
transArgTuple x = case x of
  ArCon idcon arg args  -> failure x
  ArArg arg  -> failure x


transExpr :: Expr -> Result
transExpr x = case x of
  EId id  -> failure x
  EPrim prim  -> failure x
  EOpr idopr  -> failure x
  EInfix expr1 idopr2 expr3  -> failure x
  EApp expr1 expr2  -> failure x
  ECase expr clas  -> failure x
  EIf expr1 expr2 expr3  -> failure x
  ELambda pats expr  -> failure x


transCla :: Cla -> Result
transCla x = case x of
  CClause pat expr  -> failure x


transPat :: Pat -> Result
transPat x = case x of
  PId id  -> failure x
  PPrim prim  -> failure x
  PWild  -> failure x
  PTuple pattuples  -> failure x


transPatTuple :: PatTuple -> Result
transPatTuple x = case x of
  PaCon idcon pat pats  -> failure x
  PaPat pat  -> failure x


transSign :: Sign -> Result
transSign x = case x of
  SSig idvar types  -> failure x


transType :: Type -> Result
transType x = case x of
  TName idcon ids  -> failure x
  TVar idvar ids  -> failure x
  TTuple typetuples  -> failure x


transTypeTuple :: TypeTuple -> Result
transTypeTuple x = case x of
  TyTuple types  -> failure x


transAdt :: Adt -> Result
transAdt x = case x of
  AAdt idcon adtvars conss  -> failure x


transAdtVar :: AdtVar -> Result
transAdtVar x = case x of
  AdVar idvar  -> failure x


transCons :: Cons -> Result
transCons x = case x of
  CCon idcon ids  -> failure x


transId :: Id -> Result
transId x = case x of
  ICon idcon  -> failure x
  IVar idvar  -> failure x


transPrim :: Prim -> Result
transPrim x = case x of
  IInteger n  -> failure x
  IDouble d  -> failure x
  IString str  -> failure x
  IChar c  -> failure x



