module Parser.AbsHopper where

-- Haskell module generated by the BNF converter


newtype IdVar = IdVar String deriving (Eq,Ord,Show)
newtype IdCon = IdCon String deriving (Eq,Ord,Show)
newtype IdOpr = IdOpr String deriving (Eq,Ord,Show)
data Module =
   MModule IdCon [Export] [Def]
  deriving (Eq,Ord,Show)

data Export =
   MExport IdVar
  deriving (Eq,Ord,Show)

data Def =
   DSig IdVar [Type]
 | DFun IdVar Exp
  deriving (Eq,Ord,Show)

data Type =
   TName IdCon
 | TVar IdVar
 | TFun Type [Type]
  deriving (Eq,Ord,Show)

data Exp =
   EVar IdVar
 | ECon IdCon
 | EOpr IdOpr
 | EString String
 | EChar Char
 | EInteger Integer
 | EDouble Double
 | EInfix Exp IdOpr Exp
 | EApp Exp Exp
 | ELambda [Pat] Exp
  deriving (Eq,Ord,Show)

data Pat =
   PCon IdCon
 | PVar IdVar
 | PWild
  deriving (Eq,Ord,Show)

