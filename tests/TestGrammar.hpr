-- Grammar that should work
module Test (a, A) where;

{- 
  Comment test
-}

-- Type tests
t1 :: a1 -> b1
t2 :: (a2 -> b2,c2)
t3 :: (a3 -> b3) -> Either c3 Int
t4 :: {  a1
      -> a2
      -> a3 
      }
t5 :: X.A -> A


-- Pattern tests
f1 = 1
f2 2 = 2
f3 (3,3) = 3
f4 4 4 = 4
f5 (5,5) 5 = 5

g1 True = 1
g2 (Just 'a') = 2
g3 (3.14,Just pi) = 3
g4 X.C = 4
g5 (X.C c) = 5

-- Expression syntax tests

e1 = a
e2 = True
e3 = (+)
e4 = a b
e5 = a * b
e6 = a True b
e7 = case a b of
      (a,b) -> True
      _     -> False
      True  -> 3
e8 = if a then c
          else c
e9 = \a b -> c
e10 = X.A

-- ADT tests

data A = A
data B b = B b
data C c = C (CC c)
data D = D (Int,Int)
data E = E (EE EEE, EEEE)
data F = F F.FF
