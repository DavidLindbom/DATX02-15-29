import AST.AST
ast=Mod "Test" ["Test.map","Test.Cons","Test.list"] [] [Fun "Test.add" Nothing (ELambda [PVar "x",PVar "y"] (EApp (EApp (EApp (EApp (EApp (EVar "Prim.apply") (ELit (LS "erlang"))) (ELit (LS "+"))) (ELit (LI 2))) (EVar "x")) (EVar "y"))),Fun "Test.const3" Nothing (ELambda [PVar "x",PVar "y",PVar "z"] (EVar "z")),Fun "Test.f" (Just (TApp (TApp (TCon "Prim.->") (TVar "a")) (TVar "a"))) (ELambda [PVar "x"] (EApp (EApp (EApp (EVar "Test.const3") (EApp (EVar "Test.f") (ECon "Test.Nil"))) (EApp (EVar "Test.f") (ELit (LS "")))) (EVar "x"))),Fun "Test.list" Nothing (EApp (EApp (EVar "Test.map") (EApp (EVar "Test.add") (ELit (LI 1)))) (EApp (EApp (ECon "Test.Cons") (ELit (LI 1))) (EApp (EApp (ECon "Test.Cons") (ELit (LI 2))) (ECon "Test.Nil")))),Fun "Test.map" Nothing (ELambda [PVar "_arg1",PVar "_arg2"] (ECase (ETuple [EVar "_arg1",EVar "_arg2"]) [(PTuple [PWild,PCon "Test.Nil" []],ECon "Test.Nil"),(PTuple [PVar "f",PCon "Test.Cons" [PVar "x",PVar "xs"]],EApp (EApp (ECon "Test.Cons") (EApp (EVar "f") (EVar "x"))) (EApp (EApp (EVar "Test.map") (EVar "f")) (EVar "xs")))]))] (fromList [("Test.Cons",TApp (TApp (TCon "Prim.->") (TVar "a")) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "a"))) (TApp (TCon "Test.List") (TVar "a")))),("Test.Nil",TApp (TCon "Test.List") (TVar "a"))])