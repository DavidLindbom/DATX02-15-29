import AST.AST
typed=Mod "Test" ["Test.map","Test.poly","Test.type_error","Test.Cons","Test.Nil"] [] [Fun "Test.Cons" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "a")) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "a"))) (TApp (TCon "Test.List") (TVar "a"))))) (ELambda [PVar "x1",PVar "x2"] (ETuple [ELit (LA "cons"),EVar "x1",EVar "x2"])),Fun "Test.Nil" (TForAll (TApp (TCon "Test.List") (TVar "a"))) (ELit (LA "nil")),Fun "Test.map" (TForAll (TApp (TApp (TCon "Prim.->") (TApp (TApp (TCon "Prim.->") (TVar "a")) (TVar "b"))) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "a"))) (TApp (TCon "Test.List") (TVar "b"))))) (ELambda [PVar "_arg1",PVar "_arg2"] (ECase (ETuple [EVar "_arg1",EVar "_arg2"]) [(PTuple [PVar "f",PCon "Test.Cons" [PVar "x",PVar "xs"]],EApp (EApp (EVar "Test.Cons") (EApp (EVar "f") (EVar "x"))) (EApp (EApp (EVar "Test.map") (EVar "f")) (EVar "xs"))),(PTuple [PWild,PCon "Test.Nil" []],EVar "Test.Nil")])),Fun "Test.poly" (TForAll (TVar "a")) (EApp (EApp (ELambda [PWild,PWild] (EVar "Test.poly")) (EApp (EApp (EApp (EApp (EApp (EVar "Prim.apply") (ELit (LS "erlang"))) (ELit (LS "=:="))) (ELit (LI 2))) (EVar "Test.poly")) (ELit (LS "")))) (EApp (EApp (EApp (EApp (EApp (EVar "Prim.apply") (ELit (LS "erlang"))) (ELit (LS "=:="))) (ELit (LI 2))) (EVar "Test.poly")) (ELit (LI 3)))),Fun "Test.type_error" (TCon "Prim.Number") (EApp (EApp (ELambda [PWild,PWild] (ELit (LI 0))) (EApp (EApp (EVar "Test.map") (ELambda [PVar "x"] (EVar "x"))) (EApp (EApp (EVar "Test.Cons") (ELit (LS ""))) (EVar "Test.Nil")))) (EApp (EApp (EVar "Test.map") (ELambda [PVar "x"] (EVar "x"))) (EApp (EApp (EVar "Test.Cons") (ELit (LI 0))) (EVar "Test.Nil"))))] (fromList [])