import AST.AST
typed=Mod "Test" ["Test.coerce","Test.map","Test.not","False","Test.Cons","Test.Nil","True"] [] [Fun "False" (TForAll (TCon "Test.Bool")) (ELit (LA "false")),Fun "Test.Cons" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "a")) (TApp (TApp (TCon "Prim.->") (TForAll (TApp (TCon "Test.List") (TVar "a")))) (TApp (TCon "Test.List") (TVar "a"))))) (ELit (LA "cons")),Fun "Test.Nil" (TForAll (TApp (TCon "Test.List") (TVar "a"))) (ELit (LA "nil")),Fun "True" (TForAll (TCon "Test.Bool")) (ELit (LA "true")),Fun "Test.coerce" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "a")) (TVar "b"))) (EApp (EApp (EApp (EVar "Prim.apply") (ELit (LS "Prim"))) (ELit (LS "coerce"))) (ELit (LI 1))),Fun "Test.map" (TForAll (TApp (TApp (TCon "Prim.->") (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TApp (TCon "Test.List") (TVar "t11")))) (TVar "t14"))) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "t19"))) (TApp (TCon "Test.List") (TVar "t14"))))) (ELambda [PVar "f",PVar "xs"] (ECase (EVar "xs") [(PCon "Test.Cons" [PVar "x",PVar "xs2"],EApp (EApp (EVar "Test.Cons") (EApp (EVar "f") (EVar "x"))) (EApp (EApp (EVar "Test.map") (EVar "f")) (EVar "xs2"))),(PWild,EVar "Test.Nil")])),Fun "Test.not" (TApp (TApp (TCon "Prim.->") (TCon "Test.Bool")) (TCon "Test.Bool")) (ELambda [PVar "_arg1"] (ECase (ETuple [EVar "_arg1"]) [(PTuple [PCon "True" []],EVar "False")]))] (fromList [])