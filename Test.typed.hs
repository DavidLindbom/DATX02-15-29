import AST.AST
typed=Mod "Test" ["Test.map","Test.Cons","Test.list"] [] [Fun "Test.Cons" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "a")) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "a"))) (TApp (TCon "Test.List") (TVar "a"))))) (ELambda [PVar "x1",PVar "x2"] (ETuple [ELit (LA "cons"),EVar "x1",EVar "x2"])),Fun "Test.Nil" (TForAll (TApp (TCon "Test.List") (TVar "a"))) (ELit (LA "nil")),Fun "Test.add" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "t5")) (TApp (TApp (TCon "Prim.->") (TVar "t3")) (TVar "t4")))) (ELambda [PVar "x",PVar "y"] (EApp (EApp (EApp (EApp (EApp (EVar "Prim.apply") (ELit (LS "erlang"))) (ELit (LS "+"))) (ELit (LI 2))) (EVar "x")) (EVar "y"))),Fun "Test.const3" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "t1")) (TApp (TApp (TCon "Prim.->") (TVar "t2")) (TApp (TApp (TCon "Prim.->") (TVar "t3")) (TVar "t3"))))) (ELambda [PVar "x",PVar "y",PVar "z"] (EVar "z")),Fun "Test.f" (TForAll (TApp (TApp (TCon "Prim.->") (TVar "a")) (TVar "a"))) (ELambda [PVar "x"] (EApp (EApp (EApp (EVar "Test.const3") (EApp (EVar "Test.f") (EVar "Test.Nil"))) (EApp (EVar "Test.f") (ELit (LS "")))) (EVar "x"))),Fun "Test.list" (TForAll (TApp (TCon "Test.List") (TVar "t7"))) (EApp (EApp (EVar "Test.map") (EApp (EVar "Test.add") (ELit (LI 1)))) (EApp (EApp (EVar "Test.Cons") (ELit (LI 1))) (EApp (EApp (EVar "Test.Cons") (ELit (LI 2))) (EVar "Test.Nil")))),Fun "Test.map" (TForAll (TApp (TApp (TCon "Prim.->") (TApp (TApp (TCon "Prim.->") (TVar "t23")) (TVar "t20"))) (TApp (TApp (TCon "Prim.->") (TApp (TCon "Test.List") (TVar "t23"))) (TApp (TCon "Test.List") (TVar "t22"))))) (ELambda [PVar "_arg1",PVar "_arg2"] (ECase (ETuple [EVar "_arg1",EVar "_arg2"]) [(PTuple [PWild,PCon "Test.Nil" []],EVar "Test.Nil"),(PTuple [PVar "f",PCon "Test.Cons" [PVar "x",PVar "xs"]],EApp (EApp (EVar "Test.Cons") (EApp (EVar "f") (EVar "x"))) (EApp (EApp (EVar "Test.map") (EVar "f")) (EVar "xs")))]))] (fromList [])