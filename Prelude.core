module 'Prelude' ['__another_sig'/0, 'another_sig'/0,
                  'module_info'/0]
    attributes []
'another_sig'/0 =
    fun() ->
        case {} of
            {} when 'true' ->
                3
            ({_cor1} when 'true' ->
                 primop 'match_fail'({'case_clause', _cor1})
             -| ['compiler_generated'])
        end
'__another_sig'/0 =
    fun() ->
        apply call 'erlang':'make_fun'
              ('Prim', 'curry', 1)('another_sig'/0)
'module_info'/0 =
    fun() -> call 'erlang':'get_module_info' ('Prelude')
'module_info'/1 =
    fun(_cor0) -> call 'erlang':'get_module_info' ('Prelude', _cor0)
end